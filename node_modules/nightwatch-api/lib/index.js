"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startWebDriver = startWebDriver;
exports.stopWebDriver = stopWebDriver;
exports.createSession = createSession;
exports.closeSession = closeSession;
exports.getNewScreenshots = getNewScreenshots;
exports.Section = exports.client = void 0;

var Client = _interopRequireWildcard(require("./client"));

var _promisify = require("./promisify");

var _proxy = _interopRequireDefault(require("./proxy"));

var _section = _interopRequireDefault(require("nightwatch/lib/page-object/section"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let nightwatchClient;
/**
 * This variable represents the Nightwatch WebDriver client.
 * This is the main part of this package.
 * All Nightwatch [API](http://nightwatchjs.org/api) is available on this variable.
 * Important to note that every method call is wrapped in a promise.
 * So you can await its execution using `await` keyword.
 * Also chaining is supported as well.
 * Before using it you need to create a WebDriver session.
 * @example
 * const { client } = require('nightwatch-api');
 *
 * (async function() {
 *   await client
 *     .url('https://duckduckgo.com/')
 *     .setValue('input[name="q"]', 'WebDriver')
 *     .click('input[type="submit"]')
 *     .assert.containsText('#links', 'WebDriver - w3.org');
 * )();
 * @example
 * const { client } = require('nightwatch-api');
 *
 * (async function() {
 *   // This is much easier to debug, place console.logs, use if conditions and for loops
 *   await client.url('https://duckduckgo.com/');
 *   await client.setValue('input[name="q"]', 'WebDriver');
 *   await client.click('input[type="submit"]');
 *   await client.assert.containsText('#links', 'WebDriver - w3.org');
 * )();
 * @example
 *
 * const { client } = require('nightwatch-api');
 *
 * const googleSearch = client.page.google();
 *
 * (async function() {
 *   await googleSearch.init();
 *   await googleSearch.setValue('@searchField', 'WebDriver');
 *   await googleSearch.click('@searchButton');
 *   await googleSearch.assert.containsText('@searchResult', 'WebDriver - w3.org');
 * )();
 */

const client = (0, _proxy.default)(() => nightwatchClient);
/**
 * Starts WebDriver server according to selected environment configuration.
 * You can use it to start chromedriver, geckodriver, selenium server and other WebDrivers.
 * @example
 * const { startWebDriver, stopWebDriver } = require('nightwatch-api');
 *
 * beforeAll(async () => {
 *    await startWebDriver({ env: 'firefox' });
 * });
 *
 * afterAll(async () => {
 *    await stopWebDriver();
 * });
 * @example
 * const { startWebDriver, stopWebDriver } = require('nightwatch-api');
 *
 * (async function() {
 *   try {
 *     await startWebDriver({ env: 'chrome' });
 *     // create WebDriver client
 *     // use WebDriver session
 *   } catch (err) {
 *     console.log(err.stack);
 *   } finally {
 *     // close WebDriver session
 *     await stopWebDriver();
 *   }
 * )();
 */

exports.client = client;

async function startWebDriver(options) {
  return Client.startWebDriver(options);
}
/**
 * Stops the currently running WebDriver.
 */


async function stopWebDriver() {
  await Client.stopWebDriver();
}
/**
 * Creates a new WebDriver session.
 * You need to create a session to be able to communicate with the browser.
 * @example
 * const { createSession, closeSession } = require('nightwatch-api');
 *
 * beforeAll(async () => {
 *    await createSession({ env: 'firefox' });
 * });
 *
 * afterAll(async () => {
 *    await closeSession();
 * });
 * @example
 * const { createSession, closeSession } = require('nightwatch-api');
 *
 * (async function() {
 *   try {
 *     // create WebDriver session
 *     await createSession({ env: 'chrome' });
 *     // use WebDriver client
 *   } catch (err) {
 *     console.log(err.stack);
 *   } finally {
 *     await closeSession();
 *     // close WebDriver session
 *   }
 * )();
 */


async function createSession(
/**
 * Options are ignored if you already started the WebDriver using `startWebDriver`.
 */
options) {
  nightwatchClient = await Client.createSession(options);
  (0, _promisify.promisifyApi)(nightwatchClient, Client.runQueue);
  (0, _promisify.promisifyExpect)(nightwatchClient, Client.runQueue);
  (0, _promisify.promisifyPageObjects)(nightwatchClient, Client.runQueue);
}
/**
 * Closes the active WebDriver session.
 */


async function closeSession() {
  await Client.closeSession();
}
/**
 * This class enables creation of Nightwatch page object sections dynamically.
 * @example
 * const { client, Section } = require('nightwatch-api');
 *
 * function createSearchSection(provider, parent) {
 *   if (provider === 'google') {
 *     return new Section(
 *       {
 *          selector: 'body',
 *          elements: {
 *            searchField: 'input[name="q"]',
 *            searchButton: 'input[type="submit"]',
 *          },
 *       },
 *       {
 *         name: 'Search Section',
 *         parent: client
 *       }
 *     );
 *   }
 * }
 *
 * (async function() {
 *   const section = createSearchSection('google');
 *   await client.init();
 *   await section.setValue('@searchField', 'WebDriver');
 *   await section.click('@searchButton');
 * )();
 */


class Section extends _section.default {
  constructor(definition, options) {
    super(definition, options);
    (0, _promisify.promisifySection)(this, Client.runQueue);
  }

}
/**
 * Return the screenshot filenames which were created after latest call of this method.
 */


exports.Section = Section;

function getNewScreenshots() {
  return Client.getNewScreenshots();
}